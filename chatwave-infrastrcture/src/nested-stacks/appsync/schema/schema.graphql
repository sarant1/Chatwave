schema  {
  query: Query
  mutations: mutations
  subscriptions: Subscriptions
}

type Query {
  listRooms: [Room]
  listMessages(roomId: ID!): [Message]
}

type Mutations {
  createRoom(input: RoomInput!): Room
  createMessage(input: MessageInput!): Message
  updateMessage(input: MessageInput!): Message
}

type Subscription {
  onCreateRoom: Room @aws_subscribe(mutations: ["createRoom"])
  onCreateMessageByRoomId(roomId: ID!): Message @aws_subscribe(mutations: ["createMessage"])
  onUpdateMessageByRoomId(roomId: ID!): Message @aws_subscribe(mutations: ["updateMessage"])
}

type RoomConnection {
  items: [Room]
  nextToken: String
}

type Room {
  pk: ID!
  sk: ID!
  roomId: ID!
  title: String!
  latestMessage: Message
  latestMessageDate: String
  createdAt: String
}

input RoomInput {
  title: String!
}

type MessageConnection {
  items: [Message!]
  nextToken: String
}

type Message {
  pk: ID!
  sk: ID!
	message: MessageContent!
	sender_id: String!
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
	roomId: ID!
}

type MessageContent {
	text: String
}

input MessageInput {
	content: MessageContentInput!
	roomId: ID!
	id: ID
}

input MessageContentInput {
	text: String
	imageId: String
}