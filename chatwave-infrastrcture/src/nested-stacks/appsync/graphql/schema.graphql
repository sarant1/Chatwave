type Message {
  pk: String
  sk: String
  type: String!
  imageKey: String
  key: String!
  message: String
  senderEmail: String!
  otherUserEmail: String!
  updatedAt: String
  roomId: String!
}

input MessageInput {
  type: String!
  # image or text
  imageKey: String
  # this will be returned from presigned url lamdba
  message: String
  # populate this if it is not a photo
  roomId: String!
  senderEmail: String!
  otherUserEmail: String!
}

type Room {
  pk: ID
  sk: ID
  avatarUrl: String
  title: String
  roomId: String!
  message: String!
  updatedAt: String!
  senderEmail: String!
}

type RoomConnection {
  items: [Room]
  nextToken: String
}

input RoomInput {
  otherUserEmail: String!
  # to
  senderEmail: String!
  # from
  message: String!
  type: String!
  avatarUrl: String
  title: String!
}

type User {
  pk: String
  sk: String
  email: String!
}

type Mutation {
  createRoom(input: RoomInput!): Room
  createMessage(input: MessageInput!): Message
  updateMessage(input: MessageInput!): Message
}

type Query {
  listRooms: [Room]
  listMessages(roomId: ID!): [Message]
}

type Subscription {
  onCreateRoom(title: String!): Room @aws_subscribe(mutations: ["createRoom"])
  onCreateMessageByRoomId(roomId: ID!): Message
    @aws_subscribe(mutations: ["createMessage"])
}
